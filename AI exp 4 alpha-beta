def evaluate(node):
    return node

def is_terminal(node):
    return isinstance(node, int)

def get_children(node):
    return node if isinstance(node, tuple) else []

def alpha_beta_pruning(node, depth, alpha, beta, maximizing_player):
    if depth == 0 or is_terminal(node):
        return evaluate(node)
    if maximizing_player:
        max_eval = -float('inf')
        for child in get_children(node):
            eval = alpha_beta_pruning(child, depth - 1, alpha, beta, False)
            max_eval = max(max_eval, eval)
            alpha = max(alpha, eval)
            if beta <= alpha:  # Beta cut-off (pruning)
                break
        return max_eval
    else:
        min_eval = float('inf')
        for child in get_children(node):
            eval = alpha_beta_pruning(child, depth - 1, alpha, beta, True)
            min_eval = min(min_eval, eval)
            beta = min(beta, eval)
            if beta <= alpha:  # Alpha cut-off (pruning)
                break
        return min_eval

# Example usage
game_tree = ((3, 5), (6, (2, 9)))
best_value = alpha_beta_pruning(game_tree, depth=3, alpha=-float('inf'), beta=float('inf'), maximizing_player=True)
print(f"Best value for maximizing player: {best_value}")
